//-------------------------------------------- SUMMARY / NOTES --------------------------------------------
//---------------------------------------------------------------------------------------------------------
// SUMMARY:
1- GLOBAL VARIABLES
2- OBJECTS
3- SEQUENCES
4- MAIN PROGRAM 

// NOTES:
Column: contains a list of N elevators
    status: ACTIVE or INACTIVE    
    OutsideButton:
        Status: ON or OFF

Elevator: 
    status: IDLE, UP or DOWN  
    insideDoor: OPENED or CLOSED
    OutsideDoor: 
        status: OPENED or CLOSED
    InsideButton:
        Status: ON or OFF

//------------------------------------------- GLOBAL VARIABLES ------------------------------------------
//-------------------------------------------------------------------------------------------------------
SET numberOfFloors
SET numberOfElevators

//----------------------------------------------- OBJECTS -----------------------------------------------
//-------------------------------------------------------------------------------------------------------

<------------------- COLUMN OBJECT ------------------->
DEFINE Column USING id AND status AND numberOfElevators AND numberOfFloors:
    ID: id,
    Status: status,
    ElevatorsList: SET TO EMPTY ElevatorsList           
    OutsideButtonsList: SET TO EMPTY OutsideButtonsList //This is a list containing the buttons in each floor (UP and DOWN buttons)

    SEQUENCE createElevatorsList USING numberOfElevators
        FOR EACH numberOfElevators 
            SET tempID = 1
            ADD (INSTANTIATE Elevator WITH tempID AND "IDLE" AND 1 AND "CLOSED" AND numberOfFloors) TO ElevatorsList
            INCREMENT tempID by 1
        ENDFOR
    ENDSEQUENCE    

    SEQUENCE createOutsideButtonsList USING numberOfFloors
        FOR EACH numberOfFloors 
            SET tempID = 1
            ADD (INSTANTIATE OutsideButton WITH tempID AND numberOfFloors) TO OutsideButtonsList
            INCREMENT tempID by 1
        ENDFOR
    ENDSEQUENCE
ENDDEFINE

<------------------- ELEVATOR OBJECT ------------------->
DEFINE Elevator USING id AND status AND floor AND door AND numberOfFloors:
    ID: id,
    Status: status,
    Floor: floor,
    InsideDoor: insideDoor,                             //This is the elevator door (each elevator has only on door)
    OutsideDoorsList: SET TO EMPTY OutsideDoorsList     //This is a list containing the doors controled by each elevator in each floor
    FloorList: SET TO EMPTY FloorList                   //This is a list of requested floors to stop for an elevator selected with findElevator logic

     SEQUENCE createOutsideDoorsList USING numberOfFloors
        FOR EACH numberOfFloors 
            SET tempID = 1
            ADD (INSTANTIATE OutsideDoor WITH tempID AND numberOfFloors) TO OutsideDoorList
            INCREMENT tempID by 1
        ENDFOR
    ENDSEQUENCE

    SEQUENCE createOutsideDoorsList USING numberOfFloors
        FOR EACH numberOfFloors 
            SET tempID = 1
            ADD (INSTANTIATE OutsideDoor WITH tempID AND numberOfFloors) TO OutsideDoorsList
            INCREMENT tempID by 1
        ENDFOR
    ENDSEQUENCE

    SEQUENCE createInsideButtonsList USING numberOfFloors
        FOR EACH numberOfFloors 
            SET tempID = 1
            ADD (INSTANTIATE InsideButton WITH tempID AND numberOfFloors) TO InsideButtonsList
            INCREMENT tempID by 1
        ENDFOR
    ENDSEQUENCE
ENDDEFINE

<------------------- OUTSIDE DOOR OBJECT ------------------->
DEFINE OutsideDoor USING id AND numberOfFloors
    ID: id,
    Status: status,
ENDDEFINE

<------------------- OUTSIDE BUTTON OBJECT ------------------->
DEFINE OutsideButton USING id AND numberOfFloors
    ID: id,
    Status: status
ENDDEFINE

<------------------- INSIDE BUTTON OBJECT ------------------->
DEFINE InsideButton USING id AND numberOfFloors
    ID: id,
    Status: status
ENDDEFINE


//----------------------------------------------- SEQUENCES -----------------------------------------------
//---------------------------------------------------------------------------------------------------------

<------------------- LOGIC TO FIND THE BEST ELEVATOR WITH A PRIORIZATION LOGIC ------------------->
// The best option is the nearest and already moving elevator that has the same direction that the current direction
// If there is no elevators moving at the same direction as the current direction, the nearest idle elevator is selectedList

SEQUENCE findElevator USING currentFloor AND currentDirection AND column1 ElevatorsList   
    SET ActiveElevatorsList TO EMPTY
    SET IdleElevatorsList TO EMPTY

        // Separate the elevators from list in 2 lists: active and idle
        FOR EACH elevatorN IN ElevatorsList  
            IF (elevatorN IS NOT "IDLE" AND elevatorN status IS EQUAL TO currentDirection) THEN
                // Verify if the request is on the elevators way, if the elevator has already passed the current floor, elevator will just continue its way ignoring this call
                IF (elevatorN status IS "UP" AND elevatorN floor IS < currentFloor OR elevatorN status IS "DOWN" AND elevatorN floor IS > currentFloor) THEN
                    ADD elevatorN TO ActiveElevatorsList
                ENDIF
            ELSE 
                ADD elevatorN TO IdleElevatorsList
            ENDIF
        ENDFOR

        IF (ActiveElevatorsList IS not EMPTY) THEN
            CALL findNearestElevator USING ActiveElevatorsList
        ELSE 
            CALL findNearestElevator USING IdleElevatorsList         

    RETURN bestElevator 
ENDSEQUENCE

<------------------- LOGIC TO FIND THE NEAREST ELEVATOR ------------------->
SEQUENCE findNearestElevator USING selectedList
    SET bestElevator = elevator1    //lets take the first element of the array and compare it to each elevatorN of the array  
    SET bestDistance = |bestElevator floor - currentFloor|
    FOR EACH elevatorN IN selectedList 
        IF (|elevatorN floor - currentFloor| < bestDistance) THEN
            STORE elevatorN in bestElevator            
        ENDIF
    ENDFOR
    RETURN bestElevator 
ENDSEQUENCE

<------------------- LOGIC TO STORE FLOOR IN LIST WHEN USER PRESS BUTTON INSIDE OR OUTSIDE ELEVATOR ------------------->
SEQUENCE addFloorToFloorList USING elevator AND floor 
    ADD floor TO elevator FloorList
    SORT elevator FloorList ASCENDING
ENDSEQUENCE

<------------------- LOGIC TO MOVE ELEVATOR ------------------->
SEQUENCE moveElevator USING elevator AND floorList AND requestFloor
    WHILE elevator floorList IS NOT EMPTY DO    
        IF (elevator status IS "IDLE") THEN     //In this case the elevator is idle thus the list will have only one element
            IF (elevator floor IS < requestFloor) THEN
                SET elevator status TO "UP"
            ELSE 
                SET elevator status TO "DOWN"
            ENDIF
        ENDIF

        IF elevator status IS "UP" THEN
            MOVE TO the NEXT floor FROM the FloorList AND remove floor FROM FloorList UNTIL reach the last element OF the list
            DISPLAY currentFloorNumber ON internal AND external displays
            IF FloorList IS EMPTY THEN
                SET elevator status TO "IDLE"
            ELSE 
                SET elevator status TO "DOWN"
            ENDIF
        ELSE IF elevator status IS "DOWN" THEN
            MOVE TO the previous floor FROM the FloorList AND remove floor FROM FloorList UNTIL reach the first element OF the list
            DISPLAY currentFloorNumber ON internal AND external displays
            IF FloorList IS EMPTY THEN
                SET elevator status TO "IDLE"
            ELSE 
                SET elevator status TO "UP"
            ENDIF
        ENDIF
    ENDWHILE
ENDSEQUENCE

<------------------- LOGIC TO MOVE UP ------------------->
SEQUENCE
    MOVE TO the NEXT floor FROM the FloorList AND remove floor FROM FloorList UNTIL reach the last element OF the list
    DISPLAY currentFloorNumber ON internal AND external displays
    CALL openDoor
    CALL closeDoor
ENDSEQUENCE

<------------------- LOGIC TO MOVE DOWN ------------------->

<------------------- LOGIC TO OPEN DOOR ------------------->
SEQUENCE openDoor USING elevator AND waitingTime AND obstruction
    SET elevator insideDoor TO "OPENED"
    SET waitingTime TO 0 seconds

ENDSEQUENCE



 
//--------------------------------------------- MAIN PROGRAM ----------------------------------------------
//---------------------------------------------------------------------------------------------------------

<------------------- INITIATE SYSTEM ------------------->
DEFINE initSystem USING numberOfFloors AND numberOfElevators
    SET column1 TO INSTANTIATE Column WITH 1 AND "ACTIVE" AND numberOfFloors AND numberOfElevators
    CALL column1 createElevatorsList
ENDDEFINE

<------------------- BUTTON REQUESTS OUTSIDE ELEVATOR ------------------->
// When user press a button outside the elevator requesting for an elevator we have acces to the request floor and direction desired

SEQUENCE requestElevator USING currentFloor AND elevator status
    CALL findElevator WITH currentFloor AND elevator RETURNING bestElevator
    CALL addFloorToFloorList WITH bestElevator AND currentFloor
    CALL moveElevator WITH bestElevator AND floorList AND currentFloor
    // CALL openDoor WITH bestElevator AND waitingTime AND obstruction
ENDSEQUENCE

<------------------- BUTTON REQUESTS INSIDE ELEVATOR ------------------->
// When user press a button inside the elevator requesting for a destination floor we have acces to the destinationFloor 
SEQUENCE requestStop USING requestFloor AND elevator
    CALL addFloorToFloorList WITH elevator AND requestFloor
    //CheckWeight
    //checkSecurity
    //CALL closeDoor
    CALL moveElevator WITH elevator AND floorList AND requestFloor
    //CALL openDoor
ENDSEQUENCE





//-------------------------------------------- TESTING PROGRAM --------------------------------------------
//---------------------------------------------------------------------------------------------------------
//SCENARIO:
1 column
2 elevators //SET elevator amount
10 floors

