//-------------------------------------------- SUMMARY / NOTES --------------------------------------------
//---------------------------------------------------------------------------------------------------------
// SUMMARY:
1- GLOBAL VARIABLES
2- OBJECTS
3- SEQUENCES
4- MAIN PROGRAM 

// NOTES:
Column: contains a list of N elevators
    status: ONLINE or OFFLINE

Elevator: 
    status: IDLE, UP or DOWN  
    door: OPEN or CLOSED

// Buttons: exterior, interior


//------------------------------------------- GLOBAL VARIABLES ------------------------------------------
//-------------------------------------------------------------------------------------------------------
SET numberOfFloor
SET numberOfElevator

//----------------------------------------------- OBJECTS -----------------------------------------------
//-------------------------------------------------------------------------------------------------------

<------------------- COLUMN OBJECT ------------------->
DEFINE Column USING id AND status AND numberOfElevator AND numberOfFloor:
    ID: id,
    Status: status,
    ElevatorsList: SET TO EMPTY ElevatorsList

    SEQUENCE createElevatorsList USING numberOfElevator
        FOR EACH numberOfElevator 
            SET elevator TO INSTANTIATE Elevator WITH 1 AND "IDLE" AND 1 AND "CLOSED"
            ADD elevator TO ElevatorsList
            INCREMENT id by 1
        ENDFOR
    ENDSEQUENCE

ENDDEFINE

<------------------- ELEVATOR OBJECT ------------------->
DEFINE Elevator USING id AND status AND floor:
    ID: id,
    Status: status,
    Floor: floor,
    Door: door,  
    FloorList: SET TO EMPTY FloorList
ENDDEFINE

<------------------- INSTANTIATING COLUMN ------------------->
SET column1 TO INSTANTIATE Column WITH 1 AND "ONLINE"
// SET column1 status TO "ONLINE"    //set the status to offline to turn off the column


//----------------------------------------------- SEQUENCES -----------------------------------------------
//---------------------------------------------------------------------------------------------------------

<------------------- FIND THE BEST ELEVATOR WITH A PRIORIZATION LOGIC ------------------->
// The best option is the nearest and already moving elevator that has the same direction that the request direction
// If there is no elevators moving at the same direction as the request direction, the nearest idle elevator is selectedList

SEQUENCE findElevator USING request floor AND request direction AND column1.ElevatorsList   
    SET ActiveElevatorsList TO EMPTY
    SET IdleElevatorsList TO EMPTY

        // Separate the elevators from list in 2 lists: active and idle
        FOR EACH elevatorN IN ElevatorsList  
            IF (elevatorN IS NOT "IDLE" AND elevatorN status IS EQUAL TO request direction) THEN
                // Verify if the request is on the elevators way, if the elevator has already passed the request floor, elevator will just continue its way ignoring this call
                IF (elevatorN status IS "UP" AND elevatorN floor IS < request floor OR elevatorN status IS "DOWN" AND elevatorN floor IS > request floor) THEN
                    ADD elevatorN TO ActiveElevatorsList
                ENDIF
            ELSE 
                ADD elevatorN TO IdleElevatorsList
            ENDIF
        ENDFOR

        IF (ActiveElevatorsList IS not EMPTY) THEN
            CALL findNearestElevator USING ActiveElevatorsList
        ELSE 
            CALL findNearestElevator USING IdleElevatorsList         

    RETURN bestElevator 
ENDSEQUENCE

<------------------- FIND THE NEAREST ELEVATOR ------------------->
SEQUENCE findNearestElevator USING selectedList
    SET bestElevator = elevator1    //lets take the first element of the array and compare it to each elevatorN of the array  
    SET bestDistance = |bestElevator floor - request floor|
    FOR EACH elevatorN IN selectedList 
        IF (|elevatorN floor - request floor| < bestDistance) THEN
            STORE elevatorN in bestElevator            
        ENDIF
    ENDFOR
    RETURN bestElevator 
ENDSEQUENCE

<------------------- MOVE ELEVATOR ------------------->
SEQUENCE moveElevator USING elevator
    WHILE elevator floorList IS NOT EMPTY DO    
        IF elevator status IS "UP" THEN
            MOVE TO the next floor from the FloorList until reach the last element of the list
            IF FloorList IS EMPTY THEN
                SET elevator status TO "IDLE"
            ELSE 
                SET elevator status TO "DOWN"
            ENDIF
        ELSE 
             MOVE TO the previous floor from the FloorList until reach the first element of the list
        DISPLAY currentFloorNumber ON internal AND external displays
    ENDWHILE
ENDSEQUENCE

<------------------- STORE FLOOR IN LIST WHEN USER PRESS BUTTON INSIDE OR OUTSIDE ELEVATOR ------------------->
SEQUENCE addFloorToFloorList USING elevator AND floor 
    ADD floor TO elevator FloorList
    SORT elevator FloorList ASCENDING
ENDSEQUENCE

 
//--------------------------------------------- MAIN PROGRAM ----------------------------------------------
//---------------------------------------------------------------------------------------------------------

// When user press a button outside the elevator requesting for an elevator
// we have acces to the requestFloor and direction desired

SEQUENCE requestElevator USING request floor AND elevator status
    CALL findElevator WITH request floor AND elevator status RETURNING bestElevator
    CALL addFloorToFloorList WITH bestElevator AND requestFloor
    CALL moveElevator WITH bestElevator AND requestFloor
    //CheckWeight
    //checkDoors
ENDSEQUENCE


// When user press a button inside the elevator requesting for a destination floor
// we have acces to the destinationFloor 

SEQUENCE
    // CALL moveElevatorToRequestFloor WITH requestFloor AND destinationFloor AND bestElevator
ENDSEQUENCE



//-------------------------------------------- TESTING PROGRAM --------------------------------------------
//---------------------------------------------------------------------------------------------------------
//SCENARIO:
1 column
2 elevators //SET elevator amount
10 floors

