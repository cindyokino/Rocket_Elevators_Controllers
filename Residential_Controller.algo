//-------------------------------------------- SUMMARY / NOTES --------------------------------------------
//---------------------------------------------------------------------------------------------------------
// SUMMARY:
1- GLOBAL VARIABLES
2- OBJECTS
3- SEQUENCES
4- MAIN PROGRAM 

// NOTES:
Column: contains a list of N elevators
    status: online or ofline

Elevator: 
    status: active or idle  
    direction: up or down
    door: open or closed


//------------------------------------------- GLOBAL VARIABLES ------------------------------------------
//-------------------------------------------------------------------------------------------------------
SET elevator_amount     //This is the total number of elevators


//----------------------------------------------- OBJECTS -----------------------------------------------
//-------------------------------------------------------------------------------------------------------

<------------------- COLUMN OBJECT ------------------->
DEFINE Column USING id and status:
    ID: id,
    Status: status,
    ElevatorsList: SET to empty ElevatorsList

    SEQUENCE createElevatorsList USING elevator_amount
        FOR x IN elevator_amount 
            SET elevator TO INSTANTIATE Elevator WITH 1 AND idle AND 1 AND closed
            ADD elevator TO ElevatorsList
            INCREMENT id by 1
        ENDFOR
    ENDSEQUENCE

ENDDEFINE

<------------------- ELEVATOR OBJECT ------------------->
DEFINE Elevator USING id and status:
    ID: id,
    Status: status,
    Direction: direction,
    Floor: floor,
    Door: door,  
    FloorList: SET to empty FloorList
ENDDEFINE

<------------------- INSTANTIATING COLUMN ------------------->
SET column1 TO INSTANTIATE Column WITH 1 AND online
// SET column1 status TO offline    //set the status to offline to turn off the column


//----------------------------------------------- SEQUENCES -----------------------------------------------
//---------------------------------------------------------------------------------------------------------

<------------------- FIND THE BEST ELEVATOR WITH A PRIORIZATION LOGIC ------------------->
// The best option is the nearest and already moving elevator that has the same direction that the request direction
// If there is no elevators moving at the same direction as the request direction, the nearest idle elevator is selectedList

SEQUENCE findElevator USING request_floor AND request_direction AND ElevatorsList   
    SET ActiveElevatorsList to empty
    SET IdleElevatorsList to empty

        FOR EACH elevatorN IN ElevatorsList  
            IF (elevatorN IS active AND elevatorN_direction IS equal request_direction) THEN
                ADD elevatorN TO ActiveElevatorsList
            ELSE if (elevatorN IS idle) THEN
                ADD elevatorN TO IdleElevatorsList
            ENDIF
        ENDFOR

        IF (ActiveElevatorsList IS not NULL) THEN
            CALL findNearestElevator USING ActiveElevatorsList
        ELSE 
            CALL findNearestElevator USING IdleElevatorsList         

    RETURN bestElevator 
ENDSEQUENCE

<------------------- FIND THE NEAREST ELEVATOR ------------------->
SEQUENCE findNearestElevator USING selectedList
    SET bestElevator = elevator1    //lets take the first element of the array and compare it to each elevatorN of the array  
    SET bestDistance = |bestElevator_floor - request_floor|
    FOR EACH elevatorN IN selectedList 
        IF (|elevatorN_floor - request_floor| < bestDistance) THEN
            STORE elevatorN in bestElevator            
        ENDIF
    ENDFOR
ENDSEQUENCE

<------------------- MOVE ELEVATOR ------------------->
SEQUENCE moveElevator USING elevator
    WHILE elevator_floorList IS NOT empty DO    
        IF elevator_direction IS "UP" THEN
            MOVE TO the next floor from the FloorList until reach the last element of the list
            IF FloorList IS empty THEN
                SET elevator_status TO "IDLE"
            ELSE 
                SET elevator_direction TO "DOWN"
            ENDIF
        ELSE 
             MOVE TO the previous floor from the FloorList until reach the first element of the list
        DISPLAY currentFloorNumber ON internal AND external displays
    ENDWHILE
ENDSEQUENCE

<------------------- MOVE ELEVATOR WHEN USER PRESS BUTTON INSIDE OR OUTSIDE ELEVATOR ------------------->
SEQUENCE addFloorToFloorList USING elevator AND floor 
    ADD floor TO elevator_FloorList
    SORT elevator_FloorList ASCENDING
ENDSEQUENCE

 
//--------------------------------------------- MAIN PROGRAM ----------------------------------------------
//---------------------------------------------------------------------------------------------------------

// When user press a button outside the elevator requesting for an elevator
// we have acces to the requestFloor and direction desired

SEQUENCE requestElevator USING request_floor AND request_direction
    CALL findElevator WITH request_floor AND request_direction RETURNING bestElevator
    CALL addFloorToFloorList WITH bestElevator AND requestFloor
    CALL moveElevator WITH bestElevator AND requestFloor
ENDSEQUENCE


// When user press a button inside the elevator requesting for a destination floor
// we have acces to the destinationFloor 

SEQUENCE
    // CALL moveElevatorToRequestFloor WITH requestFloor AND destinationFloor AND bestElevator
ENDSEQUENCE



//-------------------------------------------- TESTING PROGRAM --------------------------------------------
//---------------------------------------------------------------------------------------------------------
//SCENARIO:
1 column
2 elevators //SET elevator_amount
10 floors

