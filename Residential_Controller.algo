//-------------------------------------------- SUMMARY / NOTES --------------------------------------------
//---------------------------------------------------------------------------------------------------------
// SUMMARY:
1- GLOBAL VARIABLES
2- OBJECTS
3- SEQUENCES
4- MAIN PROGRAM 

// NOTES:
Column: contains a list of N elevators
    status: ACTIVE or INACTIVE    
    buttons from lists: ON or OFF

Elevator: 
    status: IDLE, UP or DOWN  
    elevatorDoor: OPENED or CLOSED
    FloorDoors from list: OPENED or CLOSED
    buttons from list: ON or OFF


//------------------------------------------- GLOBAL VARIABLES ------------------------------------------
//-------------------------------------------------------------------------------------------------------
SET numberOfFloors
SET numberOfElevators


//----------------------------------------------- OBJECTS -----------------------------------------------
//-------------------------------------------------------------------------------------------------------

<------------------- COLUMN OBJECT ------------------->
DEFINE Column USING id AND status AND numberOfElevators AND numberOfFloors:
    ID: id,
    Status: status,
    ElevatorsList: SET TO EMPTY ElevatorsList           
    ButtonsUpList: SET TO EMPTY ButtonsUpList     //This is a list containing the UP buttons in each floor
    ButtonsDownList: SET TO EMPTY ButtonsDownList //This is a list containing the DOWN buttons in each floor

    SEQUENCE createElevatorsList USING numberOfElevators
        FOR EACH numberOfElevators 
            SET tempID = 1
            ADD (INSTANTIATE Elevator WITH tempID AND "IDLE" AND 1 AND "CLOSED" AND numberOfFloors) TO ElevatorsList
            INCREMENT tempID by 1
        ENDFOR
    ENDSEQUENCE    

    SEQUENCE createButtonsUpList USING numberOfFloors
        FOR EACH numberOfFloors 
            SET tempID = 1
            ADD (INSTANTIATE Button WITH tempID AND numberOfFloors AND "OFF") TO ButtonsUpList
            INCREMENT tempID by 1
        ENDFOR
    ENDSEQUENCE

    SEQUENCE createButtonsDownList USING numberOfFloors
        FOR EACH numberOfFloors 
            SET tempID = 1
            ADD (INSTANTIATE Button WITH tempID AND numberOfFloors AND "OFF") TO ButtonsDownList
            INCREMENT tempID by 1
        ENDFOR
    ENDSEQUENCE
ENDDEFINE

<------------------- ELEVATOR OBJECT ------------------->
DEFINE Elevator USING id AND status AND floor AND door AND numberOfFloors:
    ID: id,
    Status: status,
    Floor: floor,
    elevatorDoor: (INSTANTIATE Door WITH tempID AND numberOfFloors), //This is the elevator door (each elevator has only on door)
    FloorDoorsList: SET TO EMPTY FloorDoorsList,                     //This is a list containing the doors controled by each elevator in each floor
    FloorButtonsList: SET TO EMPTY FloorButtonsList,                 //This is a list containing the floor buttons inside each elevator
    FloorList: SET TO EMPTY FloorList,                               //This is a list of requested floors to stop for an elevator selected with findElevator logic

     SEQUENCE createFloorDoorsList USING numberOfFloors
        FOR EACH numberOfFloors 
            SET tempID = 1
            ADD (INSTANTIATE Door WITH tempID AND numberOfFloors) TO FloorDoorsList
            INCREMENT tempID by 1
        ENDFOR
    ENDSEQUENCE

    SEQUENCE createFloorButtonsList USING numberOfFloors
        FOR EACH numberOfFloors 
            SET tempID = 1
            ADD (INSTANTIATE Button WITH tempID AND numberOfFloors AND "OF") TO FloorButtonsList
            INCREMENT tempID by 1
        ENDFOR
    ENDSEQUENCE
ENDDEFINE

<------------------- DOOR OBJECT ------------------->
DEFINE Door USING id AND numberOfFloors
    ID: id,
    Status: status,
    Floor: floor,
ENDDEFINE

<------------------- BUTTON OBJECT ------------------->
DEFINE Button USING id AND numberOfFloors
    ID: id,
    Status: status,
    Floor: floor,
ENDDEFINE


//----------------------------------------------- SEQUENCES -----------------------------------------------
//---------------------------------------------------------------------------------------------------------

<------------------- LOGIC TO FIND THE BEST ELEVATOR WITH A PRIORIZATION LOGIC ------------------->
// The best option is the nearest and already moving elevator that has the same direction that the current direction
// If there is no elevators moving at the same direction as the current direction, the nearest idle elevator is selectedList

SEQUENCE findElevator USING currentFloor AND currentDirection AND column1 ElevatorsList   
    SET ActiveElevatorsList TO EMPTY
    SET IdleElevatorsList TO EMPTY

        // Separate the elevators from list in 2 lists: active and idle
        FOR EACH elevatorN IN ElevatorsList  
            IF (elevatorN IS NOT "IDLE" AND elevatorN status IS EQUAL TO currentDirection) THEN
                // Verify if the request is on the elevators way, if the elevator has already passed the current floor, elevator will just continue its way ignoring this call
                IF (elevatorN status IS "UP" AND elevatorN floor IS < currentFloor OR elevatorN status IS "DOWN" AND elevatorN floor IS > currentFloor) THEN
                    ADD elevatorN TO ActiveElevatorsList
                ENDIF
            ELSE 
                ADD elevatorN TO IdleElevatorsList
            ENDIF
        ENDFOR

        IF (ActiveElevatorsList IS not EMPTY) THEN
            CALL findNearestElevator USING ActiveElevatorsList
        ELSE 
            CALL findNearestElevator USING IdleElevatorsList         

    RETURN bestElevator 
ENDSEQUENCE

<------------------- LOGIC TO FIND THE NEAREST ELEVATOR ------------------->
SEQUENCE findNearestElevator USING selectedList
    SET bestElevator = elevator1    //lets take the first element of the array and compare it to each elevatorN of the array  
    SET bestDistance = |bestElevator floor - currentFloor|
    FOR EACH elevatorN IN selectedList 
        IF (|elevatorN floor - currentFloor| < bestDistance) THEN
            STORE elevatorN in bestElevator            
        ENDIF
    ENDFOR
    RETURN bestElevator 
ENDSEQUENCE

<------------------- LOGIC TO STORE FLOOR IN LIST WHEN USER PRESS BUTTON INSIDE OR OUTSIDE ELEVATOR ------------------->
SEQUENCE addFloorToFloorList USING elevator AND floor 
    ADD floor TO elevator FloorList
    SORT elevator FloorList ASCENDING
ENDSEQUENCE

<------------------- LOGIC TO MOVE ELEVATOR ------------------->
SEQUENCE moveElevator USING elevator AND floorList AND requestFloor
    WHILE elevator floorList IS NOT EMPTY DO    
        IF (elevator status IS "IDLE") THEN     //In this case the elevator is idle thus the list will have only one element
            IF (elevator floor IS < requestFloor) THEN
                SET elevator status TO "UP"
            ELSE 
                SET elevator status TO "DOWN"
            ENDIF
        ENDIF

        IF elevator status IS "UP" THEN
            CALL moveUp WITH elevator 
        ELSE
            CALL moveDown WITH elevator
    ENDWHILE
ENDSEQUENCE

<------------------- LOGIC TO MOVE UP ------------------->
SEQUENCE moveUp USING elevator     
    FOR EACH floor IN FloorList
        IF doors are open THEN
            CALL closeDoors
        ENDIF
        MOVE elevator UP to the next item
        DISPLAY floor ON internal AND external displays
        CALL openDoors
        REMOVE floor
        SET ButtonsUpList-floor TO "OFF" //selects the button with corresponding floor from ButtonsUpList 
        SET FloorButtonsList-floor TO "OFF" //selects the button with corresponding floor from ButtonsUpList 
    ENDFOR
    IF FloorList IS EMPTY THEN
        SET elevator status TO "IDLE"
    ELSE 
        SET elevator status TO "DOWN"
    ENDIF
ENDSEQUENCE

<------------------- LOGIC TO MOVE DOWN ------------------->
SEQUENCE movedown USING elevator     
    FOR EACH floor IN FloorList use a REVERSE ITERATION
        IF doors are open THEN
            CALL closeDoors
        ENDIF
        MOVE elevator DOWN to the next item
        DISPLAY floor ON internal AND external displays
        CALL openDoors
        REMOVE floor
        SET ButtonsDownList-floor TO "OFF" //selects the button with corresponding floor from ButtonsUpList 
        SET FloorButtonsList-floor TO "OFF" //selects the button with corresponding floor from ButtonsUpList 
    ENDFOR
    MOVE TO the previous floor FROM the FloorList AND remove floor FROM FloorList UNTIL reach the first element OF the list
            DISPLAY currentFloorNumber ON internal AND external displays
            IF FloorList IS EMPTY THEN
                SET elevator status TO "IDLE"
            ELSE 
                SET elevator status TO "UP"
            ENDIF
        ENDIF    
ENDSEQUENCE

<------------------- LOGIC TO OPEN DOORS ------------------->
SEQUENCE openDoors USING elevator AND waitingTime AND obstruction
    SET elevator elevatorDoor TO "OPENED"
    SET waitingTime TO 0 seconds
    //deixar aberto com um tempo
ENDSEQUENCE

<------------------- LOGIC TO CLOSE DOORS ------------------->
SEQUENCE closeDoors USING elevator AND waitingTime AND obstruction
    SET elevator elevatorDoor AND floorDoor TO "CLOSED"
    SET waitingTime TO 0 seconds
    //checar se tem obstrucao
ENDSEQUENCE

 
//--------------------------------------------- MAIN PROGRAM ----------------------------------------------
//---------------------------------------------------------------------------------------------------------

<------------------- INITIATE SYSTEM ------------------->
DEFINE initSystem USING numberOfFloors AND numberOfElevators
    SET column1 TO INSTANTIATE Column WITH 1 AND "ACTIVE" AND numberOfFloors AND numberOfElevators
    CALL column1 createElevatorsList    //each elevator calls createFloorDoorsList and createFloorButtonsList
    CALL column1 createButtonsUpList
    CALL column1 createButtonsDownList
ENDDEFINE


<------------------- BUTTON REQUESTS OUTSIDE ELEVATOR ------------------->
// When user press a button outside the elevator requesting for an elevator we have acces to its curent floor and requested direction 
SEQUENCE requestElevator USING currentFloor AND requestedDirection
    READ currentFloor AND requestedDirection
    IF requestedDirection is UP THEN
        SET ButtonsUpList-currentFloor TO "ON"  //selects the button with corresponding floor from ButtonsUpList  
    ELSE 
        SET ButtonsDownList-currentFloor TO "ON"
    ENDIF
    CALL findElevator WITH currentFloor AND requestedDirection AND column ElevatorsList RETURNING bestElevator
    CALL addFloorToFloorList WITH bestElevator AND currentFloor RETURNING floorList
    CALL moveElevator WITH bestElevator AND floorList AND currentFloor
ENDSEQUENCE

<------------------- BUTTON REQUESTS INSIDE ELEVATOR ------------------->
// When user press a button inside the elevator requesting for a destination floor we have acces to the destinationFloor 
SEQUENCE requestStop USING requestFloor AND elevator
    READ currentFloor AND requestedDirection
    CALL addFloorToFloorList WITH elevator AND requestFloor
    //CheckWeight
    //checkSecurity
    //CALL closeDoor
    CALL moveElevator WITH elevator AND floorList AND requestFloor
    //CALL openDoor
ENDSEQUENCE





//-------------------------------------------- TESTING PROGRAM --------------------------------------------
//---------------------------------------------------------------------------------------------------------
//SCENARIO:
1 column
2 elevators //SET elevator amount
10 floors

