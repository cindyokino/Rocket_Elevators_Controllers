//------------------------------------------- SUMMARY / NOTES -----------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------
// SUMMARY:
1- GLOBAL VARIABLES
2- COLUMN OBJECT
3- ELEVATOR OBJECT
4- DOOR OBJECT
5- BUTTON OBJECT
6- LISTENERS 
7- TESTING PROGRAM

// NOTES:
Column: contains a list of N elevators
    status: ACTIVE or INACTIVE    
    buttonsUp and buttonsDown from lists: ON or OFF

Elevator: 
    status: IDLE, UP or DOWN  
    weightSensor: ON or OFF
    obstructionSensor: ON or OFF
    elevatorDoor: OPENED or CLOSED
    FloorDoors from list: OPENED or CLOSED
    floorButtons from list: ON or OFF


//------------------------------------------- GLOBAL VARIABLES ---------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------
SET numberOfColumns
SET numberOfFloors       
SET numberOfElevators
SET waitingTime         //How many seconds the door remains open
SET maxWeight           //Maximum weight an elevator can carry in KG


//------------------------------------------- COLUMN OBJECT -----------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------
DEFINE Column USING id AND status AND numberOfElevators AND numberOfFloors:
    ID: id,
    status: status,
    minimumfloor: minFloor,          
    maximumfloor: maxFloor,          
    elevatorsList: SET TO EMPTY,           
    buttonsUpList: SET TO EMPTY,     //This is a list containing the UP buttons in each floor
    buttonsDownList: SET TO EMPTY,   //This is a list containing the DOWN buttons in each floor

    CALL createElevatorsList WITH numberOfElevators
    CALL createButtonsUpList WITH numberOfFloors
    CALL createButtonsDownList WITH numberOfFloors

    SEQUENCE createElevatorsList USING numberOfElevators
        FOR EACH numberOfElevators 
            SET tempID = 1
            ADD (INSTANTIATE Elevator WITH tempID AND "IDLE" AND 1 AND "CLOSED" AND numberOfFloors) TO elevatorsList
            INCREMENT tempID by 1
        ENDFOR
    ENDSEQUENCE    

    SEQUENCE createButtonsUpList USING numberOfFloors
        FOR EACH numberOfFloors 
            SET tempID = 1
            IF tempID NOT EQUAL TO maximumFloor THEN
                ADD (INSTANTIATE Button WITH tempID AND numberOfFloors AND "OFF") TO ButtonsUpList
            ENDIF
            INCREMENT tempID by 1
        ENDFOR
    ENDSEQUENCE

    SEQUENCE createButtonsDownList USING numberOfFloors
        FOR EACH numberOfFloors 
            SET tempID = 1
            IF tempID IS GREATER THAN TO minimumFloor THEN
                ADD (INSTANTIATE Button WITH tempID AND numberOfFloors AND "OFF") TO ButtonsDownList
            ENDIF
            INCREMENT tempID by 1
        ENDFOR
    ENDSEQUENCE

    <------------------- LOGIC TO FIND THE BEST ELEVATOR WITH A PRIORIZATION LOGIC ------------------->
    // The best option is the nearest and already moving elevator that has the same direction that the current direction
    // If there is no elevators moving at the same direction as the current direction, the nearest idle elevator is selectedList

    SEQUENCE findElevator USING currentFloor AND currentDirection AND elevatorsList OF columnN
        SET ActiveElevatorsList TO EMPTY
        SET IdleElevatorsList TO EMPTY

        FOR EACH elevatorN IN elevatorsList
            IF (elevatorN IS NOT "IDLE" AND elevatorN status IS EQUAL TO currentDirection) THEN
                // Verify if the request is on the elevators way, if the elevator has already passed the current floor, elevator will just continue its way ignoring this call
                IF (elevatorN status IS "UP" AND elevatorN floor IS < currentFloor OR elevatorN status IS "DOWN" AND elevatorN floor IS > currentFloor) THEN
                    ADD elevatorN TO ActiveElevatorsList
                ENDIF
            ELSE 
                ADD elevatorN TO IdleElevatorsList
            ENDIF
        ENDFOR

        IF (ActiveElevatorsList IS not EMPTY) THEN
            CALL findNearestElevator USING ActiveElevatorsList
        ELSE 
            CALL findNearestElevator USING IdleElevatorsList         

        RETURN bestElevator 
    ENDSEQUENCE

    <------------------- LOGIC TO FIND THE NEAREST ELEVATOR ------------------->
    SEQUENCE findNearestElevator USING selectedList
        SET bestElevator TO first elevator (elevator1) OF selectedList     //lets take the first element of the array and compare it to each elevatorN of the array  
        SET bestDistance = |floor OF bestElevator - currentFloor|
        FOR EACH elevatorN IN selectedList 
            IF (|floor OF elevatorN - currentFloor| < bestDistance) THEN
                SET bestElevator TO elevatorN           
            ENDIF
        ENDFOR
        RETURN bestElevator 
    ENDSEQUENCE

ENDDEFINE


//------------------------------------------- ELEVATOR OBJECT ---------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------
DEFINE Elevator USING id AND status AND floor AND door AND numberOfFloors:
    ID: id,
    status: status,
    floor: floor,
    weightSensor: weightSensor,
    obstructionSensor: obstructionSensor,
    elevatorDoor: (INSTANTIATE Door WITH tempID AND numberOfFloors), //This is the elevator door (each elevator has only on door)
    floorDoorsList: SET TO EMPTY,                                    //This is a list containing the doors controled by each elevator in each floor
    floorButtonsList: SET TO EMPTY,                                   //This is a list containing the floor buttons inside each elevator
    floorList: SET TO EMPTY,                                          //This is a list of requested floors to stop for an elevator selected with findElevator logic

    CALL createFloorDoorsList WITH numberOfFloors
    CALL createFloorButtonsList WITH numberOfFloors

    SEQUENCE createFloorDoorsList USING numberOfFloors
        FOR EACH numberOfFloors 
            SET tempID = 1
            ADD (INSTANTIATE Door WITH tempID AND numberOfFloors) TO floorDoorsList
            INCREMENT tempID by 1
        ENDFOR
    ENDSEQUENCE

    SEQUENCE createFloorButtonsList USING numberOfFloors 
        FOR EACH numberOfFloors 
            SET tempID = 1
            ADD (INSTANTIATE Button WITH tempID AND numberOfFloors AND "OF") TO floorButtonsList
            INCREMENT tempID by 1
        ENDFOR
    ENDSEQUENCE

    <------------------- LOGIC TO MOVE ELEVATOR ------------------->
    SEQUENCE moveElevator USING elevator AND floorList AND requestFloor
        WHILE floorList OF elevator IS NOT EMPTY DO    
            IF (status OF elevator IS "IDLE") THEN     //In this case the elevator is idle thus the list will have only one element
                IF (floor OF elevator IS < requestFloor) THEN
                    SET status OF elevator TO "UP"
                ELSE 
                    SET status OF elevator TO "DOWN"
                ENDIF
            ENDIF

            IF elevator status IS "UP" THEN
                CALL moveUp WITH elevator 
            ELSE
                CALL moveDown WITH elevator
        ENDWHILE
    ENDSEQUENCE

    <------------------- LOGIC TO MOVE UP ------------------->
    SEQUENCE moveUp USING elevator     
        FOR EACH floorN IN floorList
            IF doors are open THEN
                CALL closeDoors
            ENDIF
            MOVE elevator UP to the next item
            DISPLAY floorN ON internal AND external displays
            CALL openDoors
            REMOVE floor
            SET button OF buttonsUpList WITH INDEX EQUAL floorN TO "OFF" //selects the button of corresponding floor from buttonsUpList 
            SET button OF buttonsUpList WITH INDEX EQUAL floorN TO "OFF"
        ENDFOR
        MOVE TO the NEXT floorN FROM the floorList AND remove floorN FROM floorList UNTIL reach the last element OF the floorList
                DISPLAY currentFloorNumber ON internal AND external displays
        IF floorList IS EMPTY THEN
            SET status OF elevator TO "IDLE"
        ELSE 
            SET status OF elevator TO "DOWN"
        ENDIF
    ENDSEQUENCE

    <------------------- LOGIC TO MOVE DOWN ------------------->
    SEQUENCE movedown USING elevator     
        FOR EACH floor IN floorList use a REVERSE ITERATION
            IF doors are open THEN
                CALL closeDoors
            ENDIF
            MOVE elevator DOWN to the next item
            DISPLAY floor ON internal AND external displays
            CALL openDoors
            REMOVE floor
            SET button OF buttonsDownList WITH INDEX EQUAL floorN TO "OFF" 
            SET button OF floorButtonsList WITH INDEX EQUAL floorN TO "OFF"
        ENDFOR
        MOVE TO the PREVIOUS floorN FROM the floorList AND remove floorN FROM floorList UNTIL reach the first element OF the floorList
                DISPLAY currentFloorNumber ON internal AND external displays
                IF floorList IS EMPTY THEN
                    SET elevator status TO "IDLE"
                ELSE 
                    SET elevator status TO "UP"
                ENDIF
            ENDIF    
    ENDSEQUENCE

    <------------------- LOGIC TO OPEN DOORS ------------------->
    SEQUENCE openDoors USING elevator AND floor AND waitingTime AND obstruction
        IF elevator floor IS EQUAL TO floor THEN
        SET timer TO 0 seconds
            WHILE timer < waitingTime OR weightSensor IS "ON" OR obstructionSensor IS "ON"
                open elevatorDoor OF elevator
                SET elevatorDoor OF elevator TO "OPENED"
                open floorDoor OF floorDoorsList WITH INDEX EQUAL floor
                SET floorDoor  OF floorDoorsList WITH INDEX EQUAL floor TO "OPENED"
            ENDWHILE
            CALL closeDoors
        ENDIF
    ENDSEQUENCE

    <------------------- LOGIC TO CLOSE DOORS ------------------->
    SEQUENCE closeDoors USING elevator AND waitingTime
            IF weightSensor IS "OFF" OR obstructionSensor IS "OFF"
                close elevatorDoor OF elevator
                SET elevatorDoor OF elevator TO "CLOSED"
                close floorDoor OF floorDoorsList WITH INDEX EQUAL floor
                SET floorDoor OF floorDoorsList WITH INDEX EQUAL floor TO "CLOSED"
            ENDIF
        ENDIF
    ENDSEQUENCE

    <------------------- LOGIC FOR WEIGHT SENSOR ------------------->
    SEQUENCE checkWeight USING AND maxWeight
        READ weight FROM weight sensor
        WHILE WEIGHT IS > maxWeight THEN
            SET weightSensor TO "ON"
            DISPLAY "Maximum weight reached" ON internal displays
            CALL openDoors
        ENDWHILE
        SET weightSensor TO "OFF"
    ENDSEQUENCE

    <------------------- LOGIC FOR OBSTRUCTION SENSOR ------------------->
    SEQUENCE checkObstruction USING elevator
        IF an obstacle is detected by the door sensor THEN
            SET obstructionSensor TO "ON"
        ELSE 
            SET obstructionSensor TO "OF"
    ENDSEQUENCE

    <------------------- LOGIC TO STORE FLOOR IN LIST WHEN USER PRESS BUTTON INSIDE OR OUTSIDE ELEVATOR ------------------->
    SEQUENCE addFloorToFloorList USING elevator AND floor 
        ADD floor TO floorList OF elevator 
        SORT floorList OF elevator TO ASCENDING
    ENDSEQUENCE

ENDDEFINE


//------------------------------------------- DOOR OBJECT ---------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------
DEFINE Door USING id AND numberOfFloors
    ID: id,
    Status: status,
    Floor: floor,
ENDDEFINE


//------------------------------------------- BUTTON OBJECT -------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------
DEFINE Button USING id AND numberOfFloors
    ID: id,
    Status: status,
    Floor: floor,
ENDDEFINE 


//------------------------------------------- LISTENERS ----------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------

<------------------- INITIATE SYSTEM ------------------->
DEFINE initSystem USING numberOfFloors AND numberOfElevators AND numberOfColumns AND waitingTime AND maxWeight
    FOR EACH numberOfColumns
        SET tempId = 1
        SET columnN TO INSTANTIATE Column WITH tempID AND "ACTIVE" AND numberOfFloors AND numberOfElevators
        INCREMENT tempID by 1        
    ENDFOR
ENDDEFINE 

<------------------- BUTTON REQUESTS OUTSIDE ELEVATOR ------------------->
// When user press a button outside the elevator requesting for an elevator 
SEQUENCE requestElevator USING currentFloor AND requestedDirection
    READ currentFloor AND requestedDirection
    IF requestedDirection is UP THEN
        SET button OF buttonsUpList WITH INDEX EQUAL currentFloor TO "ON"
    ELSE 
        SET button OF buttonsDownList WITH INDEX EQUAL currentFloor TO "ON"
    ENDIF
    CALL findElevator WITH currentFloor AND requestedDirection AND column elevatorsList RETURNING bestElevator
    CALL addFloorToFloorList WITH bestElevator AND currentFloor RETURNING floorList
    CALL moveElevator WITH bestElevator AND floorList AND currentFloor
ENDSEQUENCE

<------------------- BUTTON REQUESTS INSIDE ELEVATOR ------------------->
// When user press a button inside the elevator requesting for a destination floor we have acces to the destinationFloor 
SEQUENCE requestStop USING requestFloor AND elevator
    CALL checkWeight WITH maxWeight
    CALL checkObstruction WITH obstructionSensor
    READ requestedFloor AND requestedDirection
    IF requestedDirection is UP THEN
        SET button OF ButtonsUpList WITH INDEX EQUAL requestFloor TO "ON"
    ELSE 
        SET button OF buttonsDownList WITH INDEX EQUAL requestFloor TO "ON"
    ENDIF
    CALL addFloorToFloorList WITH elevator AND requestFloor
    CALL moveElevator WITH elevator AND floorList AND requestFloor
ENDSEQUENCE


//------------------------------------------- TESTING PROGRAM ------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------------
SET numberOfColumns     TO 1
SET numberOfFloors      TO 10
SET numberOfElevators   TO 2
SET waitingTime         TO 7 seconds (Supposed)
SET maxWeight           TO 1200 kg (Supposed)

//INITIATE SYSTEM: -----------------------------------------------------------------------------------------------------------------
CALL initSystem WITH numberOfFloors="10" AND numberOfElevators="2" AND numberOfColumns="1" AND waitingTime="7" AND maxWeight="1200"
SET column1 TO INSTANTIATE Column WITH tempID="1" AND "ACTIVE" AND numberOfFloors="10" AND numberOfElevators="2"    

//SCENARIO 1: ----------------------------------------------------------------------------------------------------------------------
//Elevator A is Idle at floor 2
//Elevator B is Idle at floor 6
//* Someone is on floor 3 and wants to go to the 7th floor. Elevator A is expected to be sent.

CALL requestElevator WITH currentFloor="3" AND requestedDirection="UP"
    //CALL findElevator OF "column1"              result: "elevator A is choosen"
    //CALL addFloorToFloorList OF "elevator A"    result: "[3]" 
    //CALL moveElevator OF "elevator A"           result: "elevator A moves from floor 2 to 3"

CALL requestStop WITH requestFloor="7" AND elevator="elevator A"
    //CALL checkWeight OF "elevator A"  WITH maxWeight="1200 kg"      result: "1 person has less than 1200 kg"
    //CALL checkObstruction OF "elevator A"                           result: "lets suppose there is no obstruction"
    //CALL addFloorToFloorList OF "elevator A"                        result: "[7]" 
    //CALL moveElevator OF "elevator A"                               result: "elevator A moves from floor 3 to 7"

//SCENARIO 2: ----------------------------------------------------------------------------------------------------------------------
//Elevator A is Idle at floor 10
//Elevator B is idle at floor 3
//* Someone is on the 1st floor and requests the 6th floor.Elevator B should be sent.
//* 2 minutes later, someone else is on the 3rd floor and requests the 5th floor. Elevator B should be sent.
//* Finally, a third person is at floor 9 and wants to go down to the 2nd floor. Elevator A should be sent.

//SCENARIO 2: person 1 -----------------------------------------------------------
CALL requestElevator WITH currentFloor="1" AND requestedDirection="UP"
    //CALL findElevator           result: "elevator B is choosen"
    //CALL addFloorToFloorList    result: "[1]" 
    //CALL moveElevator           result: "elevator B moves from floor 3 to 1"

CALL requestStop WITH requestFloor="6" AND elevator="elevator B"
    //CALL checkWeight WITH maxWeight="1200 kg"                   result: "1 person has less than 1200 kg"
    //CALL checkObstruction                                       result: "lets suppose there is no obstruction"
    //CALL addFloorToFloorList WITH elevator AND requestFloor     result: "[6]" 
    //CALL moveElevator                                           result: "elevator B moves from floor 1 to 6"

//SCENARIO 2: person 2 -----------------------------------------------------------
CALL requestElevator WITH currentFloor="3" AND requestedDirection="UP"
    //CALL findElevator           result: "elevator B is choosen"
    //CALL addFloorToFloorList    result: "[3]" 
    //CALL moveElevator           result: "2 minutes later the travel 1 is done and elevator B is idle again at floor 6, so it moves from floor 6 to 3"

CALL requestStop WITH requestFloor="6" AND elevator="elevator B"
    //CALL checkWeight WITH maxWeight="1200 kg"                   result: "1 person has less than 1200 kg"
    //CALL checkObstruction                                       result: "lets suppose there is no obstruction"
    //CALL addFloorToFloorList WITH elevator AND requestFloor     result: "[5]" 
    //CALL moveElevator                                           result: "elevator B moves from floor 3 to 5"

//SCENARIO 2: person 3 -----------------------------------------------------------
CALL requestElevator WITH currentFloor="9" AND requestedDirection="DOWN"
    //CALL findElevator           result: "elevator A is choosen"
    //CALL addFloorToFloorList    result: "[9]" 
    //CALL moveElevator           result: "elevator A moves from floor 10 to 9"

CALL requestStop WITH requestFloor="2" AND elevator="elevator A"
    //CALL checkWeight WITH maxWeight="1200 kg"                   result: "1 person has less than 1200 kg"
    //CALL checkObstruction                                       result: "lets suppose there is no obstruction"
    //CALL addFloorToFloorList WITH elevator AND requestFloor     result: "[2]" 
    //CALL moveElevator                                           result: "elevator A moves from floor 9 to 2"

//SCENARIO 3: ----------------------------------------------------------------------------------------------------------------------
//Elevator A is Idle at floor 10
//Elevator B is Moving from floor 3 to floor 6
//* Someone is on floor 3 and requests the 2nd floor. Elevator A should be sent.
//* 5 minutes later, someone else is on the 10th floor and wants to go to the 3rd. Elevator B should be sent.

//SCENARIO 3: person 1 -----------------------------------------------------------
CALL requestElevator WITH currentFloor="3" AND requestedDirection="DOWN"
    //CALL findElevator           result: "elevator A is choosen because elevator B is moving to the other direction"
    //CALL addFloorToFloorList    result: "[3]" 
    //CALL moveElevator           result: "elevator A moves from floor 10 to 3"

CALL requestStop WITH requestFloor="2" AND elevator="elevator A"
    //CALL checkWeight WITH maxWeight="1200 kg"                   result: "1 person has less than 1200 kg"
    //CALL checkObstruction                                       result: "lets suppose there is no obstruction"
    //CALL addFloorToFloorList WITH elevator AND requestFloor     result: "[2]" 
    //CALL moveElevator                                           result: "elevator A moves from floor 3 to 2"

//SCENARIO 3: person 2 -----------------------------------------------------------
CALL requestElevator WITH currentFloor="10" AND requestedDirection="DOWN"
    //CALL findElevator           result: "elevator B is choosen"
    //CALL addFloorToFloorList    result: "[10]" 
    //CALL moveElevator           result: "elevator B moves from floor 6 to 10"

CALL requestStop WITH requestFloor="3" AND elevator="elevator B"
    //CALL checkWeight WITH maxWeight="1200 kg"                   result: "1 person has less than 1200 kg"
    //CALL checkObstruction                                       result: "lets suppose there is no obstruction"
    //CALL addFloorToFloorList WITH elevator AND requestFloor     result: "[3]" 
    //CALL moveElevator                                           result: "elevator B moves from floor 10 to 3"
